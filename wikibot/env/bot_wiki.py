from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

import os
import wikipedia

bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def test(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üá¨üáß English language", callback_data='en')
    button2 = types.InlineKeyboardButton("üáÆüáπ Lingua italiana", callback_data='it')
    button3 = types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data='ru')
    markup.row(button1, button2, button3)
    await message.answer('Choose language ‚óè Scegli la lingua ‚óè B—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', reply_markup=markup)

@dp.callback_query_handler(text='it')
async def lang_it(call: types.CallbackQuery):
    wikipedia.set_lang('it') 
    markup_lang_it = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_lang_it = types.KeyboardButton("‚ùì Coma usare")
    markup_lang_it.add(button_lang_it)
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, call.from_user.first_name + ", ciao! Inserisci una parola o una frase e te ne dar√≤ una breve descrizione, oltre a collegamenti a risorse di terze parti se desideri maggiori dettagli")
    await bot.send_message(call.message.chat.id, text="Per visualizzare le istruzioni per l'utilizzo del bot, fare clic sul pulsante 'Come usare'".format(call.message.from_user), reply_markup=markup_lang_it)

    @dp.message_handler()
    async def term_send_it(message: types.Message):
        if(message.text == "‚ùì Coma usare"):
            await bot.send_message(message.chat.id, text="1. Per iniziare, seleziona la lingua desiderata; "'\n'
                                                            "2. Quindi inserisci la parola o la frase di cui vuoi conoscere il significato; "'\n'
                                                            "3. Se la richiesta inserita non √® corretta, specificarla secondo le opzioni proposte e reinserire la richiesta; "'\n'
                                                            "4. Se hai bisogno di saperne di pi√π su una parola o una frase, puoi leggere un articolo su Wikipedia, guardare un video su YouTube o guardare una foto su Shutterstock. Per fare ci√≤, fare clic sul pulsante appropriato; "'\n'
                                                            "5. Per cercare una nuova parola o frase, inserisci semplicemente una nuova query")
        
        else:
            await message.answer(wikipedia.summary(message.text, sentences=2))
            markup_term_send_it = types.InlineKeyboardMarkup()
            button1_term_send_it = types.InlineKeyboardButton(f"{(message.text).capitalize()} su Wikipedia", url=wikipedia.page(message.text).url)
            markup_term_send_it.add(button1_term_send_it)
            button2_term_send_it = types.InlineKeyboardButton(f"{(message.text).capitalize()} su Youtube", url=f"https://www.youtube.com/results?search_query={message.text}&sp=CAA%253D")
            markup_term_send_it.add(button2_term_send_it)
            button3_term_send_it = types.InlineKeyboardButton(f"{(message.text).capitalize()} su Shutterstock", url=f"https://www.shutterstock.com/ru/search/{message.text}")
            markup_term_send_it.add(button3_term_send_it)
            await bot.send_message(message.chat.id, text="‚¨áÔ∏èScopri di pi√π‚¨áÔ∏è".format(message.from_user), reply_markup=markup_term_send_it)
            await bot.send_message(message.chat.id, text=f"Inserisci una delle opzioni per perfezionare la tua richiesta - {str(wikipedia.search(message.text))[ 1 : - 1 ]}")


@dp.callback_query_handler(text='en')
async def lang_en(call: types.CallbackQuery):
    wikipedia.set_lang('en') 
    markup_lang_en = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_lang_en = types.KeyboardButton("‚ùì Terms of use")
    markup_lang_en.add(button_lang_en)
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, call.from_user.first_name + ", hi! Enter a word or phrase and I will give you a brief description of it, as well as links to third-party resources if you want more details")
    await bot.send_message(call.message.chat.id, text="To view instructions for using the bot, click the button 'Terms of use'".format(call.message.from_user), reply_markup=markup_lang_en)

    @dp.message_handler()
    async def term_send_en(message: types.Message):
        if(message.text == "‚ùì Terms of use"):
            await bot.send_message(message.chat.id, text="1. To get started, select the desired language;"'\n'
                                                            "2. Then enter the word or phrase whose meaning you want to know;"'\n'
                                                            "3. If the entered request is not accurate, specify it in accordance with the proposed options and enter the request again;"'\n'
                                                            "4. If you need to learn more about a word or phrase, you can read an article on Wikipedia, watch a video on YouTube, or look at a photo on Shutterstock. To do this, click the appropriate button;"'\n'
                                                            "5. To search for a new word or phrase, simply enter a new query")
        
        else:
            await message.answer(wikipedia.summary(message.text, sentences=2))
            markup_term_send_en = types.InlineKeyboardMarkup()
            button1_term_send_en = types.InlineKeyboardButton(f"{(message.text).capitalize()} on Wikipedia", url=wikipedia.page(message.text).url)
            markup_term_send_en.add(button1_term_send_en)
            button2_term_send_en = types.InlineKeyboardButton(f"{(message.text).capitalize()} on Youtube", url=f"https://www.youtube.com/results?search_query={message.text}&sp=CAA%253D")
            markup_term_send_en.add(button2_term_send_en)
            button3_term_send_en = types.InlineKeyboardButton(f"{(message.text).capitalize()} on Shutterstock", url=f"https://www.shutterstock.com/ru/search/{message.text}")
            markup_term_send_en.add(button3_term_send_en)
            await bot.send_message(message.chat.id, text="‚¨áÔ∏è–°hoose the required resource‚¨áÔ∏è".format(message.from_user), reply_markup=markup_term_send_en)
            await bot.send_message(message.chat.id, text=f"Enter one of the options to refine your request - {str(wikipedia.search(message.text))[ 1 : - 1 ]}")


@dp.callback_query_handler(text='ru')
async def lang_ru(call: types.CallbackQuery):
    wikipedia.set_lang('ru') 
    markup_lang_ru = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_lang_ru = types.KeyboardButton("‚ùì –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    markup_lang_ru.add(button_lang_ru)
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, call.from_user.first_name + ", –ø—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ –∏ —è –≤—ã–≤–µ–¥—É —Ç–µ–±–µ –µ–≥–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")
    await bot.send_message(call.message.chat.id, text="–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'".format(call.message.from_user), reply_markup=markup_lang_ru)

    @dp.message_handler()
    async def term_send_ru(message: types.Message):
        if(message.text == "‚ùì –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"):
            await bot.send_message(message.chat.id, text="1. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫;"'\n'
                                                            "2. –ó–∞—Ç–µ–º –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ, —Å–º—ã—Å–ª –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å;"'\n'
                                                            "3. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Ç–æ—á–µ–Ω, —É—Ç–æ—á–Ω–∏ –µ–≥–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏ –≤–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ;"'\n'
                                                            "4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∑–Ω–∞—Ç—å –æ —Å–ª–æ–≤–µ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –Ω–∞ Youtube –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ –Ω–∞ Shutterstock. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É;"'\n'
                                                            "5. –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–ª–æ–≤–æ—á–µ—Ç–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        
        
        elif(message.text == "–¢–µ–ª–µ–≤–∏–∑–æ—Ä"):
            await bot.send_message(message.chat.id, text=f"{(wikipedia.summary(message.text, sentences=5)).capitalize()}" '\n' 
                                                            "***–ü–û–ö–£–ü–ê–ô –¢–ï–õ–ï–í–ò–ó–û–†–´ –ü–û –°–ê–ú–´–ú –í–´–ì–û–î–ù–´–ú –¶–ï–ù–ê–ú –í –ì–£–ú–ï***")
            markup_term_send_ru = types.InlineKeyboardMarkup()
            button1_term_send_ru = types.InlineKeyboardButton(f"{(message.text).capitalize()} –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏", url=wikipedia.page(message.text).url)
            markup_term_send_ru.add(button1_term_send_ru)
            button2_term_send_ru = types.InlineKeyboardButton(f"{(message.text).capitalize()} –Ω–∞ Youtube", url=f"https://www.youtube.com/results?search_query={message.text}&sp=CAA%253D")
            markup_term_send_ru.add(button2_term_send_ru)
            button3_term_send_ru = types.InlineKeyboardButton(f"{(message.text).capitalize()} –Ω–∞ Shutterstock", url=f"https://www.shutterstock.com/ru/search/{message.text}")
            markup_term_send_ru.add(button3_term_send_ru)
            await bot.send_message(message.chat.id, text="‚¨áÔ∏è–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–µ—Å—É—Ä—Å‚¨áÔ∏è".format(message.from_user), reply_markup=markup_term_send_ru)
            await bot.send_message(message.chat.id, text=f"–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å - {str(wikipedia.search(message.text))[ 1 : - 1 ]}")
        
        else:
            await message.answer(wikipedia.summary(message.text, sentences=2))
            markup_term_send_ru = types.InlineKeyboardMarkup()
            button1_term_send_ru = types.InlineKeyboardButton(f"{(message.text).capitalize()} –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏", url=wikipedia.page(message.text).url)
            markup_term_send_ru.add(button1_term_send_ru)
            button2_term_send_ru = types.InlineKeyboardButton(f"{(message.text).capitalize()} –Ω–∞ Youtube", url=f"https://www.youtube.com/results?search_query={message.text}&sp=CAA%253D")
            markup_term_send_ru.add(button2_term_send_ru)
            button3_term_send_ru = types.InlineKeyboardButton(f"{(message.text).capitalize()} –Ω–∞ Shutterstock", url=f"https://www.shutterstock.com/ru/search/{message.text}")
            markup_term_send_ru.add(button3_term_send_ru)
            await bot.send_message(message.chat.id, text="‚¨áÔ∏è–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–µ—Å—É—Ä—Å‚¨áÔ∏è".format(message.from_user), reply_markup=markup_term_send_ru)
            await bot.send_message(message.chat.id, text=f"–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å - {str(wikipedia.search(message.text))[ 1 : - 1 ]}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)